#+TITLE: Verification
#+AUTHOR: Njagi Mwaniki
#+OPTIONS: date:nil

Here we aim at verifying our 

* Fetch the reads
Fetch latest, as of Jan 17 2020 COVID-19, [[https://www.ncbi.nlm.nih.gov/nuccore/1798174254][reference]].
#+BEGIN_SRC
efetch -db=nuccore -format=fasta -id=NC_045512.2 > ~/projects/Masters/verify/data/refs/COVID_19.fa
#+END_SRC

* Simulate reads
Simulate 3 sets of reads. 2 that aren't distantly related to the reference and 1 that is.

To do this we shall vary the mutation rate ~-r~, default 0.0010, but keep the mutation frequency ~-F~ at a default, 0.5000.
We want 1000 read pairs

[[https://www.sciencedirect.com/science/article/abs/pii/0165116195900705][Suggestions concerning the relationship between mutant frequency and mutation rate at the hprt locus in human peripheral T-lymphocytes]]

For 2 of them we shall use the same mutation rate but for one increase it.

Set ref as a var
#+BEGIN_SRC
export REF=~/projects/Masters/verify/data/refs/COVID_19.fa
#+END_SRC

#+BEGIN_SRC
dwgsim -N 1000 $REF covid_19_sim_1
dwgsim -N 1000 $REF covid_19_sim_2

Increase the mutation rate from the default 0.0010 to 0.0100

dwgsim -N 1000 -r 0.0100 $REF covid_19_sim_3
#+END_SRC

* Assemble a de Bruijn  graph
Assemble a coloured de Bruijn graph using Bifrost

What's a coloured graph?
The  colored  de  Bruijn  graph  is  a  variant  of  the  de  Bruijn graph which keeps track of the source of each vertex in the graph (Iqbal et al., 2012)

Prepare a sequences.txt file
#+BEGIN_SRC
~/projects/Masters/verify/data/reads/simulated/COVID_19/1/covid_19_sim_1_interleaved.fastq
~/projects/Masters/verify/data/reads/simulated/COVID_19/2/covid_19_sim_2_interleaved.fastq
~/projects/Masters/verify/data/reads/simulated/COVID_19/3/covid_19_sim_3_interleaved.fastq
#+END_SRC

#+BEGIN_SRC
Bifrost build \
  -c \
  -k 31 \
  -s sequences.txt \
  -o SARS-CoV-2
#+END_SRC

We get a DBG that looks like below:
[[../../Images/Overall/Verify/SARS-CoV-19-bifrost-DBG.png]]
 
* Bluntify/correct overlaps with gimbricate
"bluntify" the GFA graph produced by a DBG assembler using gimbricate and seqwish,
Bluntify means reducing overlaps on edges into nodes and edges in the graph itself. 

We want to come from the DBG to a VG

#+BEGIN_SRC
gimbricate -d  \
  -g SARS-CoV-2.gfa \
  -p SARS-CoV-2.paf \
  -f SARS-CoV-2.fasta \
  > SARS-CoV-2.gimbry.gfa
#+END_SRC

* Induce a variation graph using seqwish 
Induce a variation graph using seqwish

#+BEGIN_SRC
seqwish \
  -s SARS-CoV-2.fasta \
  -p SARS-CoV-2.paf \
  -g SARS-CoV-2.seqwish.gfa
#+END_SRC

* Prepare the graph for use with vg
The GCSA2 indexer requires nodes be no longer than 1024 bp therefore we have to 
use odgi chop to "chop"/reduce the sizes of these nodes.

** Build
First build the graph with odgi build
Pass ~-s~ to both build and sort the graph
#+BEGIN_SRC
odgi build \
  -s \
  -g SARS-CoV-2.seqwish.gfa \
  -o SARS-CoV-2-odgi-graph.vg
#+END_SRC


** Chop
#+BEGIN_SRC
odgi chop \
  -i SARS-CoV-2-odgi-graph.vg \
  -c 1024 \
  -o SARS-CoV-2-odgi-chopped.vg
#+END_SRC


** Sort
Topologically order the graph
#+BEGIN_SRC
odgi sort \
 -i SARS-CoV-2-odgi-chopped.vg \
 -o SARS-CoV-2-odgi-sorted.vg
#+END_SRC

** odgi view

Projection of graphs into gfa

#+BEGIN_SRC
odgi view \
 -i SARS-CoV-2-odgi-sorted.vg \
 -g \
 > SARS-CoV-2-odgi.gfa
#+END_SRC

[[../../Images/Overall/Verify/SARS-CoV-odgi.png]]

* vg
Now that we have prepared the graph for vg using odgi it's time to use vg 

** vg view

#+BEGIN_SRC
Usage: vg view [options] [ <graph.vg> | <graph.json> | <aln.gam> | <read1.fq> [<read2.fq>] ]
options:
    -g, --gfa                  output GFA format (default)
    -F, --gfa-in               input GFA format, reducing overlaps if they occur
    -v, --vg                   output VG format
#+END_SRC

#+BEGIN_SRC
vg view -Fv SARS-CoV-2-odgi.gfa > SARS-CoV-2-vg.vg
#+END_SRC

** vg index
Index the graph to allow for mapping

#+BEGIN_SRC
Creates an index on the specified graph or graphs. All graphs indexed must
already be in a joint ID space.
xg options:
    -x, --xg-name FILE     use this file to store a succinct, queryable version of the graph(s), or read for GCSA indexing
gcsa options:
    -g, --gcsa-out FILE    output a GCSA2 index to the given file
    -k, --kmer-size N      index kmers of size N in the graph (default 16)
#+END_SRC

#+BEGIN_SRC
vg index -x SARS-CoV-2.xg -g SARS-CoV-2.gcsa SARS-CoV-2-vg.vg
#+END_SRC

Building the index is not so instantaneous.

** vg map
Generate a [[https://github.com/vgteam/vg/wiki/File-Formats#gam-graph-alignment--map-vgs-bam][~gam~]]  file

Map our reads to the graph for each set of reads that we have from 1 to 3
So for this let's write a bash script

#+BEGIN_SRC bash
for i in {1..3}
do 
 vg map \
    -f ~/projects/Masters/verify/data/reads/simulated/COVID_19/${i}/covid_19_sim_${i}_interleaved.fastq \
    -x SARS-CoV-2.xg \
    -g SARS-CoV-2.gcsa \
    > SARS-CoV-2-${i}.gam
done
#+END_SRC

** Calculate coverage across the graph for each biosample
Use vg pack to get a coverage vector for each biosample

#+BEGIN_SRC
-d, --as-table         write table on stdout representing packs
#+END_SRC

#+BEGIN_SRC bash
for i in {1..3}
do 
 vg pack \
   -x SARS-CoV-2.xg \
   -g SARS-CoV-2-${i}.gam \
   -d \
   > SARS-CoV-2-${i}.pack.table
done
#+END_SRC

* Analyze the coverage data
For the rest we shall switch over to this [[../../Notebooks/Verify/Verification.ipynb][jupyter notebook]]
Our coverage map is able to differentiate the 3 samples and their distances.


* Glossary
| Acryonym | Expansion                   | Spec                                                       |
|----------+-----------------------------+------------------------------------------------------------|
| PAF      | Pairwise Alignment Format   |                                                            |
| GFA      | Graphical Fragment Assembly | https://github.com/GFA-spec/GFA-spec/blob/master/README.md |
| GAM      | Graph Alignment / Map       | https://github.com/vgteam/vg/wiki/File-Formats#gam-graph-alignment--map-vgs-bam                                                           |
 
