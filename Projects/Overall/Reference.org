#+TITLE: Reference pangenome graph
#+SUBTITLE: How to build the reference pangenome graph
#+AUTHOR: Njagi Mwaniki
#+OPTIONS: date:nil

Generate a sufficiently simple (de Bruijn) graph using an assembler suited to
the data. Let's use the simulated data from [[./Data.org][the previous data step]].

* de Bruijn Graph
Tools that can build a de Bruijn graph from reads
** spades
Spades has output in ~gfa1~ and ~fastg~.

#+BEGIN_SRC
spades.py --isolate -k 31 \
  -1 ~/projects/Masters/data/refs/r1.fq \
  -2 ~/projects/Masters/data/refs/r2.fq \
  -o ~/projects/Masters/results/spades
#+END_SRC

When the gfa is visualized it's linear as below and as expected:

[[../../Images/Overall/Reference/spades_realistic_simulation.png]]

** minia3

Using https://github.com/GATB/gatb-minia-pipeline

I had to install pysam via conda
~~

#+BEGIN_SRC
~/Software/gatb-minia-pipeline/gatb \
  --kmer-sizes 31 \
  -1 ~/projects/Masters/data/refs/r1.fq \
  -2 ~/projects/Masters/data/refs/r2.fq \
  -o WHUCoV
#+END_SRC

I had problems installing pysam to I used

#+BEGIN_SRC
~/Software/bcalm/scripts/convertToGFA.py WHUCoV_k31.contigs.fa WHUCoV_k31.contigs.gfa  31
#+END_SRC

[[../../Images/Overall/Reference/minia_realistic_simulation.png]]

** bifrost
#+BEGIN_SRC
Bifrost build \
 -k 31 \
  -s ~/projects/Masters/data/refs/interleaved.fq \
  -r ~/projects/Masters/data/refs/WHUCoV.fa \
  -o WHUCoV
#+END_SRC

The graph looks similar to what we'd expect
[[../../Images/Overall/Reference/bifrost_realistic_simulated.png]]

** bcalm2
For bcalm first interleave the fastq files
#+BEGIN_SRC
interleave-fastq r1.fq r2.fq > interleaved.fq
# WHUCoV is just short for WuHang Corona Virus
Bifrost build \
 -k 31 \
  -s ~/projects/Masters/data/refs/interleaved.fq \
  -r ~/projects/Masters/data/refs/WHUCoV.fa \
  -o WHUCoV
#+END_SRC


[[../../Images/Overall/Reference/bcalm_realistic_simulation.png]]

* Pangenome graph generation
** gimbricate
*** Selecting a graph
Which graph do we use for pangenome construction?
The one from bifrost and spades look best however I prefer the spades one because
it's more collapsed and spades doesn't require a reference.

We want to construct a pangenome reference graph from the spades gfa.
gimbricate has a section for [[https://github.com/ekg/gimbricate#pangenome-construction][pangenome construction]]

However the graph from spades fails
#+BEGIN_SRC
gimbricate \
 -g ../spades/assembly_graph_with_scaffolds.gfa \
 -p spades_WHUCoV.paf \
 -f spades_WHUCoV.fasta \
 > spades_WHUCoV.gimbry.gfa

terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
[1]    56651 abort      gimbricate -d -g ../spades/assembly_graph_with_scaffolds.gfa -p  -f  >
#+END_SRC


*** Bluntification

The closest other graph I like is from bcalm which seems to succeed

#+BEGIN_SRC
# When we run
gimbricate -d  \
  -g ../bcalm/WHUCoV.gfa \
  -p bcalm_WHUCoV.paf \
  -f bcalm_WHUCoV.fasta \
  > bcalm_CoV.gimbry.gfa

# We get
tree $(pwd)
/home/njagi/projects/Masters/results/gimbricate
├── bcalm_WHUCoV.fasta
├── bcalm_WHUCoV.gimbry.gfa
└── bcalm_WHUCoV.paf
#+END_SRC

Parameters to gimbricate:
#+BEGIN_SRC
      -g[FILE], --gfa-in=[FILE]         use this GFA FILE as input
      -f[FILE], --fasta-out=[FILE]      write renamed sequences to FASTA FILE
      -p[FILE], --paf-out=[FILE]        write GFA overlap alignments to this PAF
                                        FILE
      -d, --debug                       enable debugging
#+END_SRC

** Seqwish
There was a build failure but it didn't seem crucial so I went ahead to sort the
graph with odgi sort

#+BEGIN_SRC
seqwish \
  -s ../gimbricate/bcalm_WHUCoV.fasta \
  -p ../gimbricate/bcalm_WHUCoV.paf \
  -g bcalm_WHUCoV.seqwish.gfa
#+END_SRC

Parameters to seqwish
#+BEGIN_SRC
      -p[FILE], --paf-alns=[FILE]       Induce the graph from these PAF
                                        formatted alignments. Optionally, a list
                                        of filenames and minimum match lengths:
                                        [file_1]:[min_match_length_1],... This
                                        allows the differential filtering of
                                        short matches from some but not all
                                        inputs, in effect allowing `-k` to be
                                        specified differently for each input.
      -s[FILE], --seqs=[FILE]           The sequences used to generate the
                                        alignments (FASTA, FASTQ, .seq)
      -g[FILE], --gfa=[FILE]            Write the graph in GFA to FILE
#+END_SRC

[[../../Images/Overall/Reference/seqwish_realistic_simulation.png]]

** odgi
We need odgi to chop long nodes into short ones while preserving topology
/chop nodes so that they're shorter than 1024bp.
This is required by the GCSA2 indexer and mapper./


*** odgi build
First build the graph because odgi chop expects a serialzied graph based on the
error below
#+BEGIN_SRC
odgi chop \
  -i ../seqwish/bcalm_WHUCoV.seqwish.gfa \
  -c 1024

terminate called after throwing an instance of 'std::runtime_error'
  what():  error: Serialized handle graph does not match deserialzation type.
[1]    12064 abort      odgi chop -i ../../seqwish/bcalm_WHUCoV.seqwish.gfa -c 1024
#+END_SRC

#+BEGIN_SRC
# -s sorts the graph
odgi build \
  -s \
  -g ../seqwish/bcalm_WHUCoV.seqwish.gfa \
  -o WHUCoV_odgi_graph.vg
#+END_SRC

*** odgi chop
chop long nodes into short ones while preserving topology
/chop nodes so that they're shorter than 1024bp.
This is required by the GCSA2 indexer and mapper./

#+BEGIN_SRC
odgi chop \
  -i WHUCoV_odgi_graph.vg \
  -c 1024 \
  -o WHUCoV_odgi_chopped.vg

terminate called after throwing an instance of 'std::runtime_error'
  what():  error: Serialized handle graph does not match deserialzation type.
[1]    12064 abort      odgi chop -i ../../seqwish/bcalm_WHUCoV.seqwish.gfa -c 1024
#+END_SRC

How come both WHUCoV_odgi_chopped.vg  WHUCoV_odgi_graph.vg are the same size?

*** odgi sort
topologically order the graph

#+BEGIN_SRC
odgi sort -i WHUCoV_odgi_chopped.vg -o WHUCoV_odgi_sorted.vg
#+END_SRC

*** odgi view -g
projection of graphs into other formats, in this case gfa

#+BEGIN_SRC
odgi view -i WHUCoV_odgi_sorted.vg -g > WHUCoV_odgi.gfa
#+END_SRC


* Parameters
** kmer size
Picking a kmer size is...
I chose a kmer size of 31 because I figured it was a good kmer size from
  - Wikipedia [[https://en.m.wikipedia.org/wiki/K-mer#Choice_of_k-mer][Choice of k-mer]]
  - [[https://twitter.com/urbanslug/status/1216718494328401921][this thread]] from Pall Melsted bcalm author
  - this excerpt from [[https://www.nature.com/articles/nbt.2023][Nature Biotech: How to apply de Bruijn graphs to genome assembly]]

/Reads of 100-mers generated by Illumina technology capture only a small/
/fraction of 100-mers from the genome (even for samples sequenced to high/
/coverage), thus violating the key assumption of de Bruijn graphs./
/However, if one breaks these reads into shorter k-mers, the resulting k-mers/
/often represent nearly all k-mers from the genome for sufficiently small k./
/For example, de Bruijn graph–based assemblers may break every 100-nucleotide/
/read into 46 overlapping 55- mers and further assemble the resulting 55-mers./
/Even if some 100-mers occurring in the genome are not generated as reads, this/
/‘read breaking’ procedure13 ensures that nearly all 55-mers appearing in the/
/genome are detected. In the example shown in Figure 3, the five reads do not/
/account for all 7-mer substrings of the genome. But they do contain all 3-mers/
/present in the genome, and this is sufficient to reconstruct the genome./


** minimum abundance

* Bluntify the reference genome graph
Why do we need to bluntify the graph yet gimbricate README says:
/The major exception to this are De Bruijn assemblers, which have fixed length
overlaps that are correct by definition/

** gimbricate
** seqwish

* Organize the graph


** odgi sort
