#+LATEX: \begin{appendices}
** Code

*** Quality Control and Adapter Trimming
#+BEGIN_SRC bash
# concatenate the contents of all the files
# in ~/miniconda3/share/trimmomatic-0.39-1/adapters/ into one
# file, in my case adapters.fa and use those to trim adapters

trimmomatic PE \
 data/H_528_16_04/H_528_16_04_1.fastq.gz \
 data/H_528_16_04/H_528_16_04_2.fastq.gz \
 trimmed_forward_paired.fq.gz trimmed_forward_unpaired.fq.gz \
 trimmed_reverse_paired.fq.gz trimmed_reverse_unpaired.fq.gz \
 ILLUMINACLIP:adapters/adapters.fa:2:35:10:2:keepBothReads \
 SLIDINGWINDOW:4:35
#+END_SRC

*** Concatenate Reads into Text File
#+BEGIN_SRC bash
find $(pwd)/data -d -name '*interleave*fq' > sequences.txt
#+END_SRC

*** Problematic RSV Sequences
#+BEGIN_SRC bash
data/H_536_09_04/H_536_09_04_interleaved.fq:1271846:AGAACTCAGTGTAGGTAGAATGGTTGGCTGATCAATATCTCTAATGATTTTGGTCTGTGAATCAACTGTCATAAGAGAATTCTATCAAAGTTGAATTCCGAATCCTTGGGTCAATGACTGGGTGCACCCATTCTTCTAATGTGCTCTGTC
data/H_506_13_04/H_506_13_04_interleaved.fq:3831798:AGAACTCAGTGTAGGTAGAATGGTTGGCTGAGTAGGTAGATGGAGGCAGGTGCATGTGTGATGGGAAGTGTGGTGACGGGTTGTGTGGGCACACGGGATGAGGCGCAGATGGCTGGGGGTTTGGGAGGGGAATGGGTGGGAGAAGGAGGC
#+END_SRC

*** Minia Fragment Assembly
#+BEGIN_SRC bash
minia -in ../sequence_paths.txt \
  -kmer-size 31 \
  -abundance-min 1000 \
  -nb-cores 8
#+END_SRC

*** Graph Bluntification Using Stark
#+BEGIN_SRC bash
stark -i input_file_name \
  -o stark_bluntify.gfa \
  -s cpu-consuming
#+END_SRC

*** Odgi Graph Preparation
#+BEGIN_SRC bash
#!/usr/bin/env bash

# premap.sh

InputGFA=$1
BuildVG="build-odgi.vg"
ChoppedVG="chopped-odgi.vg"
SortedVG="sorted-odgi.vg"
ViewGFA="view-odgi.gfa"

echo "Using $InputGFA"
odgi build \
     -s \
     -g ${InputGFA} \
     -o ${BuildVG}

echo "Chopping to size 1024"
odgi chop \
     -i build-odgi.vg \
     -c 1024 \
     -o ${ChoppedVG}

echo "Sorting"
odgi sort \
     -i chopped-odgi.vg \
     -o ${SortedVG}

echo "Generating GFA $ViewGFA"
odgi view \
     -i sorted-odgi.vg \
     -g \
     > ${ViewGFA}

# Run with
./pre-map.sh stark_bluntify.gfa
#+END_SRC

*** RSV VG View
#+BEGIN_SRC bash
vg view -Fv view-odgi.gfa > graph.vg
#+END_SRC

*** RSV VG Index
#+BEGIN_SRC bash
vg index -x graph.xg -g graph.gcsa graph.vg
#+END_SRC

*** RSV VG Map Script
#+BEGIN_SRC bash
#!/usr/bin/env bash

Graphname="graph"
# Using a gams dir to put the gam files
GAMDir="gams"

# For each file in the sequence list, call vg to map it to the graph
while read Filepath;
do
    # paramter expansion http://mywiki.wooledge.org/BashFAQ/073
    Filename=${Filepath##*/}
    FileStub=${Filename%_*}

    echo "Mapping $FileStub"
    vg map \
       -f ${Filepath} \
       -x ${Graphname}.xg \
       -g ${Graphname}.gcsa \
       > ${GAMDir}/${FileStub}.gam

# Run with
./map.sh < ../sequence_paths.txt
#+END_SRC

*** Generate GAM
#+BEGIN_SRC bash
vg view -a -k gams/H_513_02_04.gam > Images/H_513_02_04.gamp
vg view -K -j Images/H_513_02_04.gamp > Images/H_513_02_04_GAMP.json
cat Images/H_513_02_04_GAMP.json | jq | less
#+END_SRC

*** VG Pack Script
#+BEGIN_SRC bash
#!/usr/bin/env bash

# Loop through each gam file
Graphname="graph"
CoverageDir="coverage"

while read Filepath;
do
    # parameter expansion http://mywiki.wooledge.org/BashFAQ/073
    FileStub=${Filepath%.*}

    vg pack \
       -d \
       -x ${Graphname}.xg \
       -g ${Filepath} \
       > ${CoverageDir}/${FileStub}.pack.table
done

# Run with

find $(pwd)/gams -d -name '*.gam' > gams.txt
./map.sh < gams.txt
# or
./coverage.sh < find $(pwd)/gams -d -name '*.gam'
#+END_SRC



