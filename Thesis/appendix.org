#+LATEX: \begin{appendices}
** Code
*** SARS-COV-2
**** Appendix 1
#+BEGIN_SRC bash
efetch -db=nuccore -format=fasta -id=NC_045512.2 > \
 ~/projects/Masters/verify/data/refs/COVID_19.fa
#+END_SRC 

**** Appendix 2
#+BEGIN_SRC bash
# Set ref as a var
export REF=~/projects/Masters/verify/data/refs/COVID_19.fa
dwgsim -N 1000 $REF covid_19_sim_1
dwgsim -N 1000 $REF covid_19_sim_2

# Increase the mutation rate from the default 0.0010 to 0.0100

dwgsim -N 1000 -r 0.0100 $REF covid_19_sim_3
#+END_SRC 


**** Appendix 3
#+BEGIN_SRC bash
Bifrost build \
  -c \
  -k 31 \
  -s sequences.txt \
  -o SARS-CoV-2
#+END_SRC

**** Appendix 4
#+BEGIN_SRC bash
Bifrost build \
  -c \
  -k 31 \
  -s sequences.txt \
  -o SARS-CoV-2
#+END_SRC

**** Appendix 5
#+BEGIN_SRC bash
gimbricate -d  \
  -g SARS-CoV-2.gfa \
  -p SARS-CoV-2.paf \
  -f SARS-CoV-2.fasta \
  > SARS-CoV-2.gimbry.gfa

#+END_SRC

**** Appendix 6
#+BEGIN_SRC bash
seqwish \
  -s SARS-CoV-2.fasta \
  -p SARS-CoV-2.paf \
  -g SARS-CoV-2.seqwish.gfa
#+END_SRC


**** Appendix 7
#+BEGIN_SRC bash
odgi build \
  -s \
  -g SARS-CoV-2.seqwish.gfa \
  -o SARS-CoV-2-odgi-graph.vg
#+END_SRC


**** Appendix 8
#+BEGIN_SRC bash
odgi chop \
  -i SARS-CoV-2-odgi-graph.vg \
  -c 1024 \
  -o SARS-CoV-2-odgi-chopped.vg
#+END_SRC

**** Appendix 9
#+BEGIN_SRC bash
odgi sort \
 -i SARS-CoV-2-odgi-chopped.vg \
 -o SARS-CoV-2-odgi-sorted.vg
#+END_SRC

**** Appendix 10
#+BEGIN_SRC bash
odgi view \
 -i SARS-CoV-2-odgi-sorted.vg \
 -g \
 > SARS-CoV-2-odgi.gfa
#+END_SRC

**** Appendix 11
#+BEGIN_SRC bash
# vg view help
Usage: vg view [options] [ <graph.vg> | <graph.json> | <aln.gam> | <read1.fq> [<read2.fq>] ]
options:
    -g, --gfa                  output GFA format (default)
    -F, --gfa-in               input GFA format, reducing overlaps if they occur
    -v, --vg                   output VG format

# Run vg view
vg view -Fv SARS-CoV-2-odgi.gfa > SARS-CoV-2-vg.vg

#+END_SRC


**** Appendix 12
#+BEGIN_SRC bash
# vg index help
xg options:
    -x, --xg-name FILE     use this file to store a succinct, queryable version of the graph(s), or read for GCSA indexing
gcsa options:
    -g, --gcsa-out FILE    output a GCSA2 index to the given file
    -k, --kmer-size N      index kmers of size N in the graph (default 16)

# Run vg index
vg index -x SARS-CoV-2.xg -g SARS-CoV-2.gcsa SARS-CoV-2-vg.vg

#+END_SRC

**** Appendix 13
#+BEGIN_SRC bash
# vg index help
xg options:
    -x, --xg-name FILE     use this file to store a succinct, queryable version of the graph(s), or read for GCSA indexing
gcsa options:
    -g, --gcsa-out FILE    output a GCSA2 index to the given file
    -k, --kmer-size N      index kmers of size N in the graph (default 16)

# Run vg index
vg index -x SARS-CoV-2.xg -g SARS-CoV-2.gcsa SARS-CoV-2-vg.vg
#+END_SRC

**** Appendix 14
#+BEGIN_SRC bash
# vg pack help
-d, --as-table         write table on stdout representing packs

# Run vg pack in a loop
for i in {1..3}
do 
 vg pack \
   -x SARS-CoV-2.xg \
   -g SARS-CoV-2-${i}.gam \
   -d \
   > SARS-CoV-2-${i}.pack.table
done
#+END_SRC

*** RSV
**** Appendix 15
#+BEGIN_SRC bash
# concatenate the contents of all the files
# in ~/miniconda3/share/trimmomatic-0.39-1/adapters/ into one
# file, in my case adapters.fa and use those to trim adapters

trimmomatic PE \
 data/H_528_16_04/H_528_16_04_1.fastq.gz \
 data/H_528_16_04/H_528_16_04_2.fastq.gz \
 trimmed_forward_paired.fq.gz trimmed_forward_unpaired.fq.gz \
 trimmed_reverse_paired.fq.gz trimmed_reverse_unpaired.fq.gz \
 ILLUMINACLIP:adapters/adapters.fa:2:35:10:2:keepBothReads \
 SLIDINGWINDOW:4:35
#+END_SRC

**** Appendix 16
#+BEGIN_SRC bash
find $(pwd)/data -d -name '*interleave*fq' > sequences.txt
#+END_SRC

**** Appendix 17
#+BEGIN_SRC bash
data/H_536_09_04/H_536_09_04_interleaved.fq:1271846:AGAACTCAGTGTAGGTAGAATGGTTGGCTGATCAATATCTCTAATGATTTTGGTCTGTGAATCAACTGTCATAAGAGAATTCTATCAAAGTTGAATTCCGAATCCTTGGGTCAATGACTGGGTGCACCCATTCTTCTAATGTGCTCTGTC
data/H_506_13_04/H_506_13_04_interleaved.fq:3831798:AGAACTCAGTGTAGGTAGAATGGTTGGCTGAGTAGGTAGATGGAGGCAGGTGCATGTGTGATGGGAAGTGTGGTGACGGGTTGTGTGGGCACACGGGATGAGGCGCAGATGGCTGGGGGTTTGGGAGGGGAATGGGTGGGAGAAGGAGGC
#+END_SRC

**** Appendix 18
#+BEGIN_SRC bash
minia -in ../sequence_paths.txt \
  -kmer-size 31 \
  -abundance-min 1000 \
  -nb-cores 8
#+END_SRC

**** Appendix 19
#+BEGIN_SRC bash
stark -i input_file_name \
  -o stark_bluntify.gfa \
  -s cpu-consuming
#+END_SRC

**** Appendix 20
#+BEGIN_SRC bash
#!/usr/bin/env bash

# premap.sh

InputGFA=$1
BuildVG="build-odgi.vg"
ChoppedVG="chopped-odgi.vg"
SortedVG="sorted-odgi.vg"
ViewGFA="view-odgi.gfa"

echo "Using $InputGFA"
odgi build \
     -s \
     -g ${InputGFA} \
     -o ${BuildVG}

echo "Chopping to size 1024"
odgi chop \
     -i build-odgi.vg \
     -c 1024 \
     -o ${ChoppedVG}

echo "Sorting"
odgi sort \
     -i chopped-odgi.vg \
     -o ${SortedVG}

echo "Generating GFA $ViewGFA"
odgi view \
     -i sorted-odgi.vg \
     -g \
     > ${ViewGFA}

# Run with
./pre-map.sh stark_bluntify.gfa
#+END_SRC

**** Appendix 21
#+BEGIN_SRC bash
vg view -Fv view-odgi.gfa > graph.vg
#+END_SRC

**** Appendix 22
#+BEGIN_SRC bash
vg index -x graph.xg -g graph.gcsa graph.vg
#+END_SRC

**** Appendix 23
#+BEGIN_SRC bash
#!/usr/bin/env bash

Graphname="graph"
# Using a gams dir to put the gam files
GAMDir="gams"

# For each file in the sequence list, call vg to map it to the graph
while read Filepath;
do
    # paramter expansion http://mywiki.wooledge.org/BashFAQ/073
    Filename=${Filepath##*/}
    FileStub=${Filename%_*}

    echo "Mapping $FileStub"
    vg map \
       -f ${Filepath} \
       -x ${Graphname}.xg \
       -g ${Graphname}.gcsa \
       > ${GAMDir}/${FileStub}.gam

# Run with
./map.sh < ../sequence_paths.txt
#+END_SRC

**** Appendix 24
#+BEGIN_SRC bash
vg view -a -k gams/H_513_02_04.gam > Images/H_513_02_04.gamp
vg view -K -j Images/H_513_02_04.gamp > Images/H_513_02_04_GAMP.json
cat Images/H_513_02_04_GAMP.json | jq | less
#+END_SRC

**** Appendix 25
#+BEGIN_SRC bash
#!/usr/bin/env bash

# Loop through each gam file
Graphname="graph"
CoverageDir="coverage"

while read Filepath;
do
    # parameter expansion http://mywiki.wooledge.org/BashFAQ/073
    FileStub=${Filepath%.*}

    vg pack \
       -d \
       -x ${Graphname}.xg \
       -g ${Filepath} \
       > ${CoverageDir}/${FileStub}.pack.table
done

# Run with

find $(pwd)/gams -d -name '*.gam' > gams.txt
./map.sh < gams.txt
# or
./coverage.sh < find $(pwd)/gams -d -name '*.gam'
#+END_SRC

#+LATEX: \end{appendices}
