* Quality Control
I started by removing reads with a Phred score below 35 and trimming sequencing
adapters, as shown in [[Quality Control and Adapter Trimming]] then compiled a list
of the file paths into a text file, as shown in
[[Concatenate Reads into Text File]].

The sequences in two datasets (~H_536_09_04~ and ~H_506_13_04~), specifically those
stated [[Problematic RSV Sequences]], caused seqwish
(https://github.com/ekg/seqwish) to crash and were therefore removed from the
experiment leaving us with 51 samples.

* Assembly Graph Construction
I used minia cite:chikhiSpaceefficientExactBruijn2013 to construct two assembly
graphs with a k-mer
length of 31 and varying minimum abundance values. Given the nature of the
dataset (51 samples of approximately 400-500 megabytes from a genome that is
approximately 15 kilobases in length), it was clear that the data was noisy and
I had to set a high minimum abundance. I, therefore, varied the minimum
abundance values between 1,000 and 2,000, as shown in [[Minia Fragment Assembly]]
to get a graph of size not greatly exceeding that of the RSV genome.

A minimum abundance of 1,000 resulted in 157 kilobytes
(approximately 10x the genome size) GFA while a minimum abundance of 2,000
resulted in a 237-kilobyte GFA (approximately 20x the genome size).
Increasing the minimum abundance from 1,000 to 2,000 reduced the size of the
resulting graph but on visual inspection seemed to have lost some of the
variable regions, as seen in Figure [[fig:rsv_assembly_1000]] and
Figure [[fig:rsv_assembly_2000]].

#+CAPTION[RSV Assembly Graph]: An assembly graph of the household 20 samples built using minia and a minimum abundance of 1000.
#+ATTR_LATEX: :width 0.75\textwidth :float multicolumn
#+NAME: fig:rsv_assembly_1000
file:../Figures/RSV/Assembly_1000.png

#+CAPTION[RSV Assembly Graph]: An assembly graph of the household 20 samples built using minia and a minimum abundance of 2000.
#+ATTR_LATEX: :width 0.75\textwidth :float multicolumn
#+NAME: fig:rsv_assembly_2000
file:../Figures/RSV/Assembly_2000.png

* Graph Bluntification
Going with the 1,000 minimum abundance graph for its increased variability but 
still manageable size. I used stark (https://github.com/hnikaein/stark) to 
bluntify, that is reduce the overlaps on edges,
cite:gargGraphbasedApproachDiploid2018 of the graph as shown in
[[Graph Bluntification Using Stark]].
This yielded a 206 kilobyte GFA that when visualized is seen in Figure
[[fig:rsv_bluntified_assembly_graph]].

#+CAPTION[Bluntified RSV Assembly Graph]: RSV household 20 assembly graph bluntified using stark.
#+ATTR_LATEX: :width 0.75\textwidth :float multicolumn
#+NAME: fig:rsv_bluntified_assembly_graph
file:../Figures/RSV/Assembly_Bluntified.png

* Prepare the Graph for Mapping with VG
The bash script in [[Odgi Graph Preparation]] was used to chop and sort the graph
for use with vg cite:garrisonVariationGraphToolkit2018 which led to the 
variation graph in Figure [[fig:rsv_variation_graph]].

#+CAPTION[RSV Variation Graph]: The household 20 variation graph after running odgi chop on it.
#+ATTR_LATEX: :width 0.75\textwidth :float multicolumn
#+NAME: fig:rsv_variation_graph
file:../Figures/RSV/Assembly_Bluntified.png

* Mapping with VG
** Convert GFA to vg Compatible Variation Graph
Using the instructions in [[RSV VG View]], I induced a vg
cite:garrisonVariationGraphToolkit2018 compatible variation graph and output it
GFA.

** Index
There was no need to prune the graph because it was small 
(a 62 kilobyte graph.vg) and we wanted to avoid losing complex regions such as 
those with many variants close to each other.
We, therefore, only built an index as in [[RSV VG Index]] and got a 61
kilobyte graph (graph.xg) and a 258 kilobyte index (graph.gcsa).

** Mapping
To map each sample against the graph, I used [[RSV VG Map Script]] to loop through 
each of the interleaved sequences and stored the output GAM files in a 
directory of our specification.

We then verified that the alignments made sense
(a task that is both subjective and a matter of judgment) by converting the GAM 
to GAMP using the instructions in [[Generate GAM]] and viewing the JSON.

* Calculate Coverage Across the Graph for Each Biosample
I used the script in [[VG Pack Script]] to generate a coverage vector 196,488 nodes
long in TSV (Tab Separated Values) format.

* Normalization
The coverage data had a lot of outliers, as shown in Figure
[[fig:structure_of_data]], and therefore needed normalization to avoid the outliers
skewing it.

#+CAPTION[RSV Structure of the Data]: Bar graphs of mean, median, maximum and standard deviation of coverage values per sample
#+ATTR_LATEX: :placement [h] :width 0.75\textwidth :float multicolumn
#+NAME: fig:structure_of_data
file:../Figures/RSV/structure_of_coverage_data.png


I normalised the coverage by setting any coverage value above zero as one and
left the zero values as zero. Meaning that any form of coverage, no matter how
deep, was valued equally, which yielded the heatmap in Figure [[fig:rsv_heatmap]].

#+CAPTION[RSV heatmap]: A heatmap of the binary normalized coverage vectors of the forty nine RSV samples. On the x axis is the node identifier and the y axis are the individual samples. The light regions indicate coverage while the dark regions indicate no coverage.
#+ATTR_LATEX: :placement [h!] :width 0.7\textwidth :float multicolumn
#+NAME: fig:rsv_heatmap
file:../Figures/RSV/Heatmap.png

#+LATEX: \newpage
* Computing a Distance Matrix

To compare the samples against each other, I computed the pairwise distances
between the samples using the [[https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/dist][dist function in R]]. It computes the euclidean
distance between any two points from $1$ to $n$ dimensions labelled
$x1, x2, ... ,xn$;
using the formula $\sqrt{(x1_1- x1_2)^2 + (x2_1- x2_2)^2 + ... + (xn_1- xn_2)^2}$ where
$x1_1$ is the first dimension of the first sample, and
is the first dimension of the second sample as can be seen in
Figure [[fig:coverage_matrix]] and Figure [[fig:cartesian_plot]].

#+CAPTION[Coverage Matrix]: A coverage matrix of nodes as the columns and samples as the rows.
#+ATTR_LATEX: :width 0.75\textwidth :float multicolumn
#+NAME: fig:coverage_matrix
file:../Figures/Methods/Coverage_Matrix.png


#+CAPTION[Cartesian Plot]: A hypothetical two-dimensional plot of 3 samples A, B and C and their Euclidean distances from each other.
#+ATTR_LATEX: :width 0.5\textwidth :float multicolumn
#+NAME: fig:cartesian_plot
file:../Figures/Methods/Cartesian_Plot.png

We can use the three theoretical samples above to form a distance matrix such
as the one in Figure [[fig:distance_matrix]].

#+CAPTION[Distance Matrix]: Distance matrix between three hypothetical samples A, B and C from Figure [[fig:cartesian_plot]].
#+ATTR_LATEX: :width 0.25\textwidth :float multicolumn
#+NAME: fig:distance_matrix
file:../Figures/Methods/Distance_Matrix.png

Given such a distance matrix, we can generate a cladogram by neighbour-joining
as in Figure [[fig:neighbour_joining_cladogram]].

#+CAPTION[Neighbour-joining Cladogram]: Neighbour Joining Cladogram of the samples in Figure [[fig:distance_matrix]].
#+ATTR_LATEX: :width 0.25\textwidth :float multicolumn
#+NAME: fig:neighbour_joining_cladogram
file:../Figures/Methods/Neighbour_Joining_Cladogram.png

It would therefore be that the distances in the tree are the pairwise Euclidean
distances between samples. This can also be applied to hierarchical clustering
to help bring out differences between samples that cluster very closely.

For RSV, I reduced the samples used in computing the distance matrix to the 17
samples in cite:githinjiAssessingUtilityMinority2018 to get a 17x17 matrix of
pairwise distances.
In the SARS-CoV-2 dataset, this resulted in the expected 3x3 matrices of
pairwise distances respectively.

#+LATEX: \clearpage
